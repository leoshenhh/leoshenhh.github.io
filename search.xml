<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cypress</title>
    <url>/2021/11/20/cypress/</url>
    <content><![CDATA[<h3 id="安装cypress"><a href="#安装cypress" class="headerlink" title="安装cypress"></a>安装cypress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add --dev cypress</span><br></pre></td></tr></table></figure>



<h3 id="打开cypress"><a href="#打开cypress" class="headerlink" title="打开cypress"></a>打开cypress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/cypress open</span><br></pre></td></tr></table></figure>



<h3 id="运行cypress"><a href="#运行cypress" class="headerlink" title="运行cypress"></a>运行cypress</h3><ul>
<li>可以通过点击GUI界面的<code>spec</code>运行</li>
<li>可以通过命令行运行</li>
<li><code>--headed</code>  为展示测试过程</li>
<li><code>--spec</code> 后接测试用例 <code>js</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/cypress run --spec cypress\integration\examples\actions.spec.js --headed</span><br></pre></td></tr></table></figure>



<h3 id="忽略测试用例"><a href="#忽略测试用例" class="headerlink" title="忽略测试用例"></a>忽略测试用例</h3><p><code>cypress.json</code> 中添加以下代码，忽略这些测试用例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">&quot;ignoreTestFiles&quot;</span>: [<span class="string">&quot;*.hot-update.js&quot;</span>.<span class="string">&quot;**/examples/*.*&quot;</span>]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="写一个测试用例"><a href="#写一个测试用例" class="headerlink" title="写一个测试用例"></a>写一个测试用例</h3><p>在<code>integration</code>文件夹下，新建一个<code>.spec.js</code>后缀的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;百度&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;能搜索&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        cy.visit(<span class="string">&#x27;https://baidu.com&#x27;</span>)</span><br><span class="line">        cy.get(<span class="string">&#x27;input#kw&#x27;</span>).type(<span class="string">&#x27;腾讯&#x27;</span>)</span><br><span class="line">        cy.contains(<span class="string">&#x27;百度一下&#x27;</span>).click()</span><br><span class="line">        cy.contains(<span class="string">&#x27;腾讯首页&#x27;</span>).should(<span class="string">&#x27;exist&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>describe</code> 为整个测试用例 第一个参数<code>title</code>为用例标题，第二个参数为箭头函数</li>
<li><code>it</code>为测试用例的其中一步,第一个参数为<code>title</code>为步骤标题，第二个参数为箭头函数</li>
<li><code>cy.visit</code> ：访问一个<code>URL</code></li>
<li><code>cy.get</code> ：获取<code>dom</code>元素</li>
<li><code>cy.type</code>: 输入文字</li>
<li><code>cy.contains</code>: 获取包含 <em>百度一下</em> 的 <code>dom</code> 元素</li>
<li><code>cy.click()</code>: 点击一个<code>dom</code>元素</li>
<li><code>cy.should(&#39;exist&#39;)</code>: <code>dom</code>元素应该存在</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/11/26/docker/</url>
    <content><![CDATA[<h3 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h3><ul>
<li><code>docker run</code></li>
</ul>
<p>运行一个<code>docker</code>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<ul>
<li><code>docker ps</code></li>
</ul>
<p>列出所有正在运行的<code>docker</code>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<ul>
<li><code>docker kill</code></li>
</ul>
<p>关掉一个正在运行的<code>docker</code>容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> 4607082</span><br></pre></td></tr></table></figure>

<ul>
<li><code>docker rm hello-world</code></li>
</ul>
<p>删除一个<code>docker</code>镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm hello-world</span><br></pre></td></tr></table></figure>

<h3 id="docker-安装-mysql"><a href="#docker-安装-mysql" class="headerlink" title="docker  安装 mysql"></a>docker  安装 mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.27</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>--name</code> 后面接 <code>mysql</code>名字（自定义）</p>
</li>
<li><p><code>-e</code> 为设置环境变量</p>
</li>
<li><p><code>MYSQL_ROOT_PASSWORD</code> 后面接 <code>ROOT</code> 用户的密码</p>
</li>
<li><p><code>-d</code> 为开启守护进程</p>
</li>
<li><p><code>mysql:</code> 后面接<code>mysql</code> 版本</p>
</li>
</ul>
<h3 id="docker-安装-postgres"><a href="#docker-安装-postgres" class="headerlink" title="docker 安装 postgres"></a>docker 安装 postgres</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -d postgres</span><br></pre></td></tr></table></figure>

<ul>
<li>参数参考上面<code>mysql</code></li>
<li><code>-p</code> 后跟 主机端口<code>:</code>容器端口</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>express-api</title>
    <url>/2021/11/08/express-api/</url>
    <content><![CDATA[<h2 id="express"><a href="#express" class="headerlink" title="express()"></a>express()</h2><p>创建一个express应用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure>

<h3 id="express-json"><a href="#express-json" class="headerlink" title="express.json()"></a>express.json()</h3><p>监听 <code>request.on(&#39;data&#39;)</code> ,如果请求的 <code>Content-Type</code> 为  <code>application/json </code> 则将结果( <code>chunk</code> )解析为<code>json</code>对象，放入 <code>request.body</code>  里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.json())</span><br><span class="line">app.use(<span class="function">(<span class="params">request,response,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>若不使用express.json()中间件,则获取 <strong>请求体</strong> 的方法为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">request,response,next</span>) =&gt;</span> &#123;</span><br><span class="line">    request.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk.toString())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="express-static-root"><a href="#express-static-root" class="headerlink" title="express.static(root)"></a>express.static(root)</h3><p>指定<code>root</code>文件夹（目录名自定义，一般为<code>public</code>）为提供静态资源的根目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>在<code>public</code>目录下新建<code>index.html</code>这个文件，并请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&#x27;localhost:8888/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果<code>public</code> 文件夹有请求的文件，则返回该文件，没有则执行<code>next()</code>进入下一个中间件</p>
<h3 id="express-row"><a href="#express-row" class="headerlink" title="express.row()"></a>express.row()</h3><p>监听 <code>request.on(&#39;data&#39;)</code> ,如果请求的 <code>Content-Type</code> 为  <code>application/octet-stream </code> 则将结果( <code>chunk</code> )解析为<code>buffer</code>，放入 <code>request.body</code>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.row())</span><br></pre></td></tr></table></figure>

<h3 id="express-text"><a href="#express-text" class="headerlink" title="express.text()"></a>express.text()</h3><p>监听 <code>request.on(&#39;data&#39;)</code> ,如果请求的 <code>Content-Type</code> 为  <code>text/plain </code> 则将结果( <code>chunk</code> )解析为<code>string</code>，放入 <code>request.body</code>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.text())</span><br></pre></td></tr></table></figure>



<h3 id="express-urlencoded"><a href="#express-urlencoded" class="headerlink" title="express.urlencoded()"></a>express.urlencoded()</h3><p>监听 <code>request.on(&#39;data&#39;)</code> ,如果请求的 <code>Content-Type</code> 为  <code>application/x-www-form-urlencoded</code> 则将结果( <code>chunk</code> )解析为<strong>对象</strong>，放入 <code>request.body</code>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.urlencoded())</span><br></pre></td></tr></table></figure>



<h2 id="app-set"><a href="#app-set" class="headerlink" title="app.set()"></a>app.set()</h2><p>设置一个任意<code>value</code>，可以通过<code>name</code>来获取到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.set(&#x27;name&#x27;,&#x27;shen&#x27;)</span><br><span class="line">app.get(&#x27;name&#x27;) // shen</span><br></pre></td></tr></table></figure>

<p>可以设置以下特殊值：</p>
<ul>
<li><code>case sensitive routing</code>    设置对请求路径大小写敏感</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;case sensitive routing&#x27;</span>,<span class="literal">false</span>) <span class="comment">// 一般放在第一个中间件之前</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>views</code></li>
</ul>
<p>设置视图文件夹 , 用于<code>res.render()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>view engine</code></li>
</ul>
<p>设置视图渲染引擎(需要安装该第三库)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="app-get"><a href="#app-get" class="headerlink" title="app.get()"></a>app.get()</h3><ul>
<li>如果参数是一个字符串<code>name</code>则获取<code>app.set(name)</code>的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果参数是路径和回调函数<code>(path,callback)</code>,则响应<code>get</code>请求,执行<code>callbakc</code>中间件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>app.post()</code> 、<code>app.put()</code> 、<code>app.delete</code> 等用法同<code>app.get()</code></li>
</ul>
<h3 id="app-all"><a href="#app-all" class="headerlink" title="app.all()"></a>app.all()</h3><p>无论是什么请求都响应</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/xxx&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="app-render"><a href="#app-render" class="headerlink" title="app.render()"></a>app.render()</h3><p>如果设置了<code>views</code>和<code>view engine</code> ，则去<code>views</code>设置的目录寻找该文件，并使用设置的<code>view engine</code>解析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.render(<span class="string">&#x27;xxx&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;Tobi&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>可以传入变量<code>&#123; name: &#39;Tobi&#39; &#125;</code>供引擎模板使用</li>
</ul>
<h3 id="app-locals"><a href="#app-locals" class="headerlink" title="app.locals"></a>app.locals</h3><p>设置<code>app</code>局部变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.locals.title = <span class="string">&#x27;啦啦啦&#x27;</span></span><br><span class="line">app.get(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.app.local.title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="req-app"><a href="#req-app" class="headerlink" title="req.app"></a>req.app</h3><p>把<code>express</code>的实例挂在了<code>req</code>,在中间件中可以通过<code>req</code>来访问<code>app</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mymiddleware.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res,next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.app.local.title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h3><p>获取路径传参的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/users/:id&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(req.params)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求 &#x27;/users/1&#x27; 打印出: &#123;id: 1&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h3><p>获取查询参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/users&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求 &#x27;/users?name=shen&amp;id=1&#x27; 打印出 &#123; name: shen,id: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="req-xhr"><a href="#req-xhr" class="headerlink" title="req.xhr"></a>req.xhr</h3><p>用来区分<code>ajax</code>请求，还是普通请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.xhr) <span class="comment">// 如果是true 则为 ajax 请求</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="req-get"><a href="#req-get" class="headerlink" title="req.get()"></a>req.get()</h3><p>获取请求头的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.get(<span class="string">&#x27;Content-Type&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="req-param"><a href="#req-param" class="headerlink" title="req.param()"></a>req.param()</h3><p>根据属性名获取 <strong>查询参数/路径传参</strong> 的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.param(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 请求 &#x27;/users?name=shen&amp;id=1&#x27; 打印出 shen</span></span><br></pre></td></tr></table></figure>

<h3 id="res-append"><a href="#res-append" class="headerlink" title="res.append()"></a>res.append()</h3><p>设置一个响应头 （只能一个一个添加）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.append(<span class="string">&#x27;Set-Cookie&#x27;</span>, <span class="string">&#x27;foo=bar; Path=/; HttpOnly&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="res-set"><a href="#res-set" class="headerlink" title="res.set()"></a>res.set()</h3><p>设置响应头（可以添加对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.set(&#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">ETag</span>: <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="res-status"><a href="#res-status" class="headerlink" title="res.status()"></a>res.status()</h3><p>设置响应状态码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.status(<span class="number">404</span>)</span><br></pre></td></tr></table></figure>

<h3 id="res-format"><a href="#res-format" class="headerlink" title="res.format()"></a>res.format()</h3><p>根据请求头的<code>Accept</code>格式，返回不同的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.format(&#123;</span><br><span class="line">  <span class="string">&#x27;text/plain&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 如果请求头的Accept 为 &#x27;text/plain&#x27;</span></span><br><span class="line">    res.send(<span class="string">&#x27;hey&#x27;</span>) </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;text/html&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 如果请求头的Accept 为 &#x27;text/html&#x27;</span></span><br><span class="line">    res.send(<span class="string">&#x27;&lt;p&gt;hey&lt;/p&gt;&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;application/json&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 如果请求头的Accept 为 &#x27;application/json&#x27;</span></span><br><span class="line">    res.send(&#123; <span class="attr">message</span>: <span class="string">&#x27;hey&#x27;</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 如果请求头的Accept 不为以上任意一个</span></span><br><span class="line">    <span class="comment">// log the request and respond with 406</span></span><br><span class="line">    res.status(<span class="number">406</span>).send(<span class="string">&#x27;Not Acceptable&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="res-get"><a href="#res-get" class="headerlink" title="res.get()"></a>res.get()</h3><p>获取请求头</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.get(<span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;text/plain&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="router-get"><a href="#router-get" class="headerlink" title="router.get()"></a>router.get()</h3><p><code>router</code> 可以看成一个小型的<code>app</code>,只有路由功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express.router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;/users/:id&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/:id/edit&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;/users/:id/edit&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>把上面的<code>router</code> 挂载到<code>app</code>,实现子路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./usersRouter&#x27;</span>)</span><br><span class="line">app.use(<span class="string">&#x27;/users&#x27;</span>,usersRputer)</span><br></pre></td></tr></table></figure>

<h3 id="express-generator"><a href="#express-generator" class="headerlink" title="express-generator"></a>express-generator</h3><p>使用<code>express-generator</code>生成默认<code>express</code>项目</p>
<ul>
<li>下载<code>express-generator</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure>

<ul>
<li>查看帮助</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">express --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成一个 以<code>ejs</code>为模板引擎，<code>demo</code>为项目名的 <code>express</code>项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">express --view=ejs demo</span><br></pre></td></tr></table></figure>

<ul>
<li>下载依赖并运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/21/hexoGithubCI/</url>
    <content><![CDATA[<p>作为一个强迫症患者，总是想让博客的源代码和部署在一个仓库（两个仓库总感觉很难受~）,更新代码就能自动构建部署。如果你也一样的话，可以参考下面的流程</p>
<blockquote>
<p>ps： 我在网上搜到的很多教程要搞私钥公钥啥的根本搞不定~~(我太菜了)</p>
</blockquote>
<ul>
<li><p>git仓库的<code>master</code>分支为博客源代码，<code>gh-pages</code>分支为博客部署分支</p>
</li>
<li><p>以下所有<code>&lt;username&gt;</code> 替换为你的 <strong>github用户名</strong></p>
</li>
</ul>
<span id="more"></span>
<h5 id="全局安装-hexo-cli-构建工具"><a href="#全局安装-hexo-cli-构建工具" class="headerlink" title="全局安装 hexo-cli 构建工具"></a>全局安装 <code>hexo-cli</code> 构建工具</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h5 id="初始化hexo仓库"><a href="#初始化hexo仓库" class="headerlink" title="初始化hexo仓库"></a>初始化hexo仓库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo init &lt;username&gt;.github.io</span><br></pre></td></tr></table></figure>

<h5 id="进入hexo仓库，本地运行这个博客-如果本地能访问到-说明你成功啦"><a href="#进入hexo仓库，本地运行这个博客-如果本地能访问到-说明你成功啦" class="headerlink" title="进入hexo仓库，本地运行这个博客,如果本地能访问到 说明你成功啦"></a>进入hexo仓库，本地运行这个博客,如果本地能访问到 说明你成功啦</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h5 id="github上创建一个仓库-仓库名设置为"><a href="#github上创建一个仓库-仓库名设置为" class="headerlink" title="github上创建一个仓库,仓库名设置为"></a>github上创建一个仓库,仓库名设置为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;username&gt;.github.io</span><br></pre></td></tr></table></figure>

<h5 id="进入这个仓库，把这个仓库推到github上"><a href="#进入这个仓库，把这个仓库推到github上" class="headerlink" title="进入这个仓库，把这个仓库推到github上"></a>进入这个仓库，把这个仓库推到github上</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m init</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="在-github-workflows-文件夹中新建pages-yml-文件、"><a href="#在-github-workflows-文件夹中新建pages-yml-文件、" class="headerlink" title="在.github/workflows 文件夹中新建pages.yml 文件、"></a>在<code>.github/workflows</code> 文件夹中新建<code>pages.yml</code> 文件、</h5><ul>
<li><p><code>pages</code>就是总标题</p>
</li>
<li><p><code>name</code> 就是每一步的标题</p>
</li>
<li><p><code>$&#123;&#123;&#125;&#125;</code>表示从环境变量中读取</p>
<p><a href="https://imgtu.com/i/IuOfOI"><img src="https://z3.ax1x.com/2021/11/05/IuOfOI.png" alt="IuOfOI.png"></a></p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span>  <span class="comment"># 监听master分支的push 如果触发就执行action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="comment"># 总标题</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 启动的虚拟机的系统</span></span><br><span class="line">    <span class="attr">steps:</span> <span class="comment"># action步骤</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 拉取当前master分支代码</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12.</span><span class="string">x</span> <span class="comment"># 下面uses这一步的标题</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span> <span class="comment"># 执行的命令 设置安装node</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span> <span class="comment"># 设置node版本为12.x</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span> <span class="comment"># 执行的命令 读取npm缓存</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 执行的命令 npm install 相信各位经常使用</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="comment"># 不用说了吧</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span> <span class="comment"># 用的是第三方的actions</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 从环境变量中获取的githubtoken</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span> <span class="comment"># 从哪个文件夹中取文件</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">gh-pages</span>  <span class="comment"># 要部署到哪个个分支 branch</span></span><br></pre></td></tr></table></figure>

<h5 id="编辑-config-yml-文件"><a href="#编辑-config-yml-文件" class="headerlink" title="编辑_config.yml  文件"></a>编辑<code>_config.yml</code>  文件</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<h5 id="在仓库的Settings-选项中将默认构建分支改为gh-pages"><a href="#在仓库的Settings-选项中将默认构建分支改为gh-pages" class="headerlink" title="在仓库的Settings 选项中将默认构建分支改为gh-pages"></a>在仓库的<code>Settings</code> 选项中将默认构建分支改为<code>gh-pages</code></h5><p><a href="https://imgtu.com/i/IuXBcj"><img src="https://z3.ax1x.com/2021/11/05/IuXBcj.md.png" alt="IuXBcj.md.png"></a></p>
<ul>
<li>现在访问<code>&lt;username&gt;.github.io</code>就应该看到你的博客啦，如果404的话，就在博客随便改个内容再次触发构建</li>
</ul>
<p>完美，强迫症患者舒服了。如果你也舒服了，请点个赞吧~~</p>
]]></content>
  </entry>
  <entry>
    <title>koa-api</title>
    <url>/2021/11/19/koa-api/</url>
    <content><![CDATA[<h3 id="koa安装"><a href="#koa安装" class="headerlink" title="koa安装"></a>koa安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add koa // 安装koa</span><br><span class="line">yarn add --dev @types/koa // 安装 k oa TS提示</span><br></pre></td></tr></table></figure>

<h3 id="安装TS"><a href="#安装TS" class="headerlink" title="安装TS"></a>安装TS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install typescript -g </span><br></pre></td></tr></table></figure>

<h3 id="安装运行TS工具"><a href="#安装运行TS工具" class="headerlink" title="安装运行TS工具"></a>安装运行TS工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ts-node-dev -g</span><br></pre></td></tr></table></figure>



<h3 id="TS初始化"><a href="#TS初始化" class="headerlink" title="TS初始化"></a>TS初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./server.ts</span></span><br><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">&#x27;koa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span>(ctx) =&gt;&#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ts-node-dev server.ts</span><br></pre></td></tr></table></figure>

<h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><p>使用中间件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="app-on"><a href="#app-on" class="headerlink" title="app.on()"></a>app.on()</h3><p>监听某个事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  log.error(<span class="string">&#x27;server error&#x27;</span>, err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="request-idempotent"><a href="#request-idempotent" class="headerlink" title="request.idempotent"></a>request.idempotent</h3><p>检查请求是否是幂等的。</p>
<blockquote>
<p>幂等: 任意多次执行所产生的影响均与一次执行的影响相同</p>
</blockquote>
<p>在<code>http</code> 请求中 <code>get</code>是幂等的 <code>post</code>、<code>put</code>等不幂等</p>
]]></content>
  </entry>
  <entry>
    <title>nextjs</title>
    <url>/2021/12/03/nextjs/</url>
    <content><![CDATA[<h3 id="创建nextjs项目"><a href="#创建nextjs项目" class="headerlink" title="创建nextjs项目"></a>创建nextjs项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init next-app next-demo</span><br></pre></td></tr></table></figure>

<ul>
<li><code>next-app</code> 接项目名</li>
</ul>
<h3 id="安装react提示"><a href="#安装react提示" class="headerlink" title="安装react提示"></a>安装react提示</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add --dev @types/react @types/react-dom</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
